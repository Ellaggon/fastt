---
import { serviceIcons } from "@/data/service-icons"

interface Props {
	name: string
	href: string
	image: string
	alt: string
	description: string
	stars?: number
	address?: string
	difficultyLevel?: string
	duration?: string
	priceUSD?: number
	priceBOB?: number
	services: { name: string; free?: boolean; available: boolean }[]
}

const props = Astro.props as Props

// Función para generar las estrellas
const renderStars = (count: number) => {
	let starIcons = ""
	for (let i = 0; i < count; i++) {
		starIcons += "★" // Unicode star character
	}
	return starIcons
}

const services = Array.isArray(props.services) ? props.services : JSON.parse(props.services || "[]")
---

<article
	class="flex w-full overflow-hidden rounded-3xl bg-white shadow-md transition-shadow duration-300 hover:shadow-lg md:flex-row"
>
	<a href={props.href}>
		<figure class="relative h-full w-full flex-shrink-0 md:h-64 md:w-48">
			<img
				src={props.image}
				alt={props.alt}
				class="h-full w-full object-cover object-center"
				loading="lazy"
			/>
		</figure>
	</a>

	<div class="flex flex-grow flex-col p-4 md:p-5">
		<div class="flex">
			<div class="flex-grow pr-4">
				<h3 class="mb-1 text-xl font-bold text-gray-900">
					<a href={props.href} class="border-gray-900 transition-colors hover:border-b-2">
						{props.name}
					</a>
				</h3>
				{/* Estrellas (alineadas con el título) */}
				{
					props.stars && props.stars > 0 && (
						<div
							class="mb-2 text-base text-yellow-500"
							aria-label={`Calificación: ${props.stars} estrellas`}
						>
							{renderStars(props.stars)}
						</div>
					)
				}
				<p class="mb-2 text-sm text-gray-600">{props.address}</p>
				{/* Descripción (Más corta para este formato) */}
				<p class="line-clamp-2 text-sm text-gray-700">{props.description}</p>

				{/* Servicios (Iconos pequeños) */}
				{
					props.services?.length > 0 && (
						<ul class="mt-3 flex flex-wrap items-center gap-x-4 gap-y-2 text-xs text-gray-600">
							{services.slice(0, 4).map((s: { name: string; id: string }) => {
								const key = s.id?.toLowerCase() as keyof typeof serviceIcons
								const Icon = serviceIcons[key]
								return (
									<li class="flex items-center space-x-1" title={s.name}>
										{Icon ? (
											<>
												<Icon class="h-4 w-4 text-gray-700" />
												<span class="text-gray-700">{s.name}</span>
											</>
										) : (
											<span class="text-lg">•</span>
										)}
									</li>
								)
							})}
							{services.length > 4 && <li class="text-gray-500">+{services.length - 4} más</li>}
						</ul>
					)
				}
			</div>

			<div
				class="mt-auto flex min-w-[8rem] flex-col items-end justify-end border-l border-gray-200 pl-4"
			>
				<div class="text-right">
					<p class="text-xs font-semibold text-gray-500">Precio por noche</p>
					{
						props.priceUSD && (
							<p class="text-2xl font-bold text-gray-900">
								<span class="text-base text-gray-900">US$</span>
								{props.priceUSD}
							</p>
						)
					}
					{
						props.priceBOB && (
							<p class="text-sm text-gray-500">
								<span class="text-xs">BOB $</span>
								{props.priceBOB}
							</p>
						)
					}
				</div>

				<a
					href={props.href}
					class="mt-4 inline-flex items-center rounded-md border border-transparent bg-blue-500 px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors duration-200 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
				>
					Ver Hotel
				</a>
			</div>
		</div>
	</div>
</article>
