---
import HotelDetails from "@/components/product/HotelDetails.astro"
import PackageDetails from "@/components/product/PackageDetails.astro"
import TourDetails from "@/components/product/TourDetails.astro"
import Layout from "@/layouts/Layout.astro"
import { asc, db, eq, Hotel, Image, Package, Product, Tour } from "astro:db"

// Obtener el ID del producto de los parámetros de la URL
const productId = Astro.params.id

let product = null
let images: (typeof Image.$inferSelect)[] = []
let subtype = null
let errorMessage: string | null = null

try {
	// 1) producto (único)
	if (!productId) throw new Error("ID de producto no proporcionado.")
	product = await db.select().from(Product).where(eq(Product.id, productId)).get()

	// 2) imágenes (lista ordenada por 'order'
	if (!product) throw new Error("El producto no fue encontrado.")
	images = await db
		.select()
		.from(Image)
		.where(eq(Image.entityId, productId))
		.orderBy(asc(Image.order))
		.all()

	// 3) datos específicos según productType
	const type = (product.productType || "").toLowerCase()
	if (type === "hotel") {
		subtype = await db.select().from(Hotel).where(eq(Hotel.productId, productId)).get()
	} else if (type === "package") {
		subtype = await db.select().from(Package).where(eq(Package.productId, productId)).get()
	} else if (type === "tour") {
		subtype = await db.select().from(Tour).where(eq(Tour.productId, productId)).get()
	}
} catch (e) {
	console.error("Error al obtener los detalles del producto:", e)
	errorMessage = e instanceof Error ? e.message : "Error"
}

const productData = product ? { ...product, images, subtype } : null
---

<Layout title={productData?.name || "Producto no encontrado"}>
	<!-- Contenedor principal -->
	<div class="min-h-screen bg-gray-950 font-sans text-gray-200">
		<div class="mx-auto max-w-6xl p-6 md:p-12">
			{
				errorMessage ? (
					// Vista de error con un diseño minimalista
					<div class="flex min-h-[60vh] flex-col items-center justify-center text-center">
						<h1 class="mb-4 text-5xl font-bold text-red-500">{errorMessage}</h1>
						<p class="text-lg text-gray-400">
							Por favor, verifica la URL o vuelve a la página principal.
						</p>
						<a
							href="/"
							class="mt-8 inline-block transform rounded-full border border-gray-500 bg-transparent px-8 py-3 font-semibold text-gray-300 transition-all duration-300 hover:scale-105 hover:border-gray-700 hover:bg-gray-800"
						>
							Volver al Inicio
						</a>
					</div>
				) : productData ? (
					// Vista de datos del producto, con estilo de tarjeta "flotante"
					<div class="space-y-8">
						<div class="relative w-full overflow-hidden rounded-3xl border border-white/10 bg-white/5 p-4 shadow-2xl backdrop-blur-lg transition-all duration-300">
							{/* Imagen principal mostrada en grande */}
							<div class="aspect-video w-full overflow-hidden rounded-2xl">
								<img
									id="main-product-image"
									src={
										productData.images[0]?.url ||
										"https://placehold.co/1200x675/000000/FFFFFF?text=Sin+Imagen"
									}
									alt={`Imagen de ${productData.name}`}
									class="h-full w-full transform object-cover transition-transform duration-500 hover:scale-105"
								/>
							</div>

							{/* Miniaturas para navegar por las imágenes */}
							{productData.images.length > 1 && (
								<div class="thumb mt-4 flex gap-4 overflow-x-auto py-1">
									{productData?.images.map((image: { url: string }) => (
										<div
											class="h-24 w-24 flex-shrink-0 cursor-pointer overflow-hidden rounded-xl opacity-70 transition-opacity duration-300 hover:opacity-100 data-[active=true]:opacity-100 data-[active=true]:ring-2 data-[active=true]:ring-neutral-100"
											data-url={image.url}
										>
											<img
												src={image.url}
												alt={`Miniatura de ${productData.name}`}
												class="h-full w-full object-cover"
											/>
										</div>
									))}
								</div>
							)}
						</div>

						{/* Sección de contenido principal unificada */}
						<div class="rounded-2xl border border-white/10 bg-white/5 p-8 shadow-xl backdrop-blur-lg md:p-12">
							<div class="mb-8">
								<h1 class="mb-2 text-4xl font-extrabold tracking-tight text-white md:text-6xl">
									{productData.name}
								</h1>
								<p class="mb-8 text-xl font-light leading-relaxed text-gray-300">
									{productData.shortDescription}
								</p>
								<h2 class="mb-4 text-2xl font-semibold text-white">
									Detalles y descripción completa
								</h2>
								<div class="mb-8 grid grid-cols-1 gap-x-8 gap-y-4 text-lg font-light md:grid-cols-2">
									<p>
										<span class="font-medium text-gray-100">Tipo:</span> {productData.productType}
									</p>
									<p>
										<span class="font-medium text-gray-100">Precio (USD):</span> $
										{productData.basePriceUSD}
									</p>
									<p>
										<span class="font-medium text-gray-100">Precio (BOB):</span>{" "}
										{productData.basePriceBOB} BOB
									</p>
									<p>
										<span class="font-medium text-gray-100">Creado en:</span>{" "}
										{new Date(productData.creationDate).toLocaleDateString()}
									</p>
									<p>
										<span class="font-medium text-gray-100">Última Actualización:</span>{" "}
										{new Date(productData.lastUpdated).toLocaleDateString()}
									</p>
								</div>
								<p class="whitespace-pre-wrap font-light leading-relaxed text-gray-300">
									{productData.longDescription}
								</p>
							</div>
						</div>
						<div class="rounded-2xl border border-white/10 bg-white/5 p-8 shadow-xl backdrop-blur-lg md:p-12">
							<div class="mb-8 grid grid-cols-1 gap-x-8 gap-y-4 text-lg font-light md:grid-cols-2">
								<h1>{productData.name}</h1>
								<p>{productData.shortDescription}</p>

								{/* Render por tipo */}
								{productData.subtype && productData.productType?.toLowerCase() === "hotel" && (
									<HotelDetails hotel={productData.subtype} />
								)}

								{productData.subtype && productData.productType?.toLowerCase() === "tour" && (
									<TourDetails tour={productData.subtype} />
								)}

								{productData.subtype && productData.productType?.toLowerCase() === "package" && (
									<PackageDetails pkg={productData.subtype} />
								)}
							</div>
						</div>
					</div>
				) : (
					// Indicador de carga
					<div class="flex min-h-[60vh] items-center justify-center">
						<p class="text-lg text-gray-500">Cargando...</p>
					</div>
				)
			}
		</div>
	</div>
</Layout>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const mainImage = document.getElementById("main-product-image") as HTMLImageElement | null
		const thumbnailsContainer = document.querySelector(".thumb")

		if (mainImage && thumbnailsContainer) {
			thumbnailsContainer.addEventListener("click", (event) => {
				const target = event.target as HTMLElement | null
				const thumbnail = target?.closest<HTMLDivElement>("div[data-url]")
				if (thumbnail) {
					const newImageUrl = thumbnail.dataset.url!
					;(mainImage as HTMLImageElement).src = newImageUrl

					// Actualizar el estado 'activo' para los estilos
					const allThumbnails =
						thumbnailsContainer.querySelectorAll<HTMLDivElement>("div[data-url]")
					allThumbnails.forEach((thumb) => {
						thumb.dataset.active = (thumb === thumbnail).toString()
					})
				}
			})

			// Establecer la primera miniatura como activa por defecto
			const firstThumbnail = thumbnailsContainer.querySelector<HTMLDivElement>("div[data-url]")
			if (firstThumbnail) {
				firstThumbnail.dataset.active = "true"
			}
		}
	})
</script>
