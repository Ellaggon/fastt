---
import HotelSubtypeForm from "@/components/forms/HotelSubtypeForm.astro"
import PackageSubtypeForm from "@/components/forms/PackageSubtypeForm.astro"
import TourSubtypeForm from "@/components/forms/TourSubtypeForm.astro"
import Layout from "@/layouts/Layout.astro"
import { getProductWithImagesAndSubtype } from "@/lib/db/product"
import { getProviderIdFromRequest } from "@/lib/db/provider"
import { getSession } from "auth-astro/server"

const session = await getSession(Astro.request)
const paramsId = Astro.params.id

if (!session?.user?.email) return Astro.redirect("/SignInPage")
if (!paramsId) return Astro.redirect("/dashboard")

const providerId = await getProviderIdFromRequest(Astro.request)
if (!providerId) return Astro.redirect("/provider")

const productBundle = await getProductWithImagesAndSubtype(paramsId)
if (!productBundle) return Astro.redirect("/dashboard")

if (String(productBundle.product.providerId) !== String(providerId)) {
	return Astro.redirect("/dashboard")
}

const product = productBundle.product
const subtype = productBundle.subtype
const normalizedType = String(product.productType || "").toLowerCase() // "hotel" | "tour" | "package"
---

<Layout title={`Editar subtipo · ${product.name || "Producto"}`}>
	<section class="mx-auto w-11/12 rounded-lg bg-beaver-900 p-8 text-gray-300 md:max-w-3xl">
		<h1 class="mb-4 text-2xl font-bold">
			Editar detalles del {product.productType} - {product.name}
		</h1>

		<!-- Form wrapper: solo este form se encarga del submit -->
		<form id="subtypeForm" class="space-y-6">
			<!-- Renderiza el formulario correspondiente. Cada componente debe tener inputs con name="" -->
			<div data-subtype-section="hotel" class={normalizedType === "hotel" ? "" : "hidden"}>
				<HotelSubtypeForm hotel={subtype} />
			</div>

			<div data-subtype-section="tour" class={normalizedType === "tour" ? "" : "hidden"}>
				<TourSubtypeForm tour={subtype} />
			</div>

			<div data-subtype-section="package" class={normalizedType === "package" ? "" : "hidden"}>
				<PackageSubtypeForm pkg={subtype} />
			</div>

			<!-- Mensajes -->
			<div id="subtypeMsg" class="min-h-[1.25rem] text-sm"></div>

			<!-- Hidden productId (usado por el script) -->
			<input id="productId" name="productId" type="hidden" value={product.id} />

			<!-- Submit -->
			<div class="flex justify-end">
				<button
					id="subtypeSubmit"
					type="submit"
					class="rounded-lg bg-green-150 px-4 py-2 font-semibold text-beaver-900 transition hover:scale-105"
				>
					Guardar Subtipo
				</button>
			</div>
		</form>

		<p class="mt-4 text-sm text-yellow-300">
			Si el subtipo no existe para este producto verás el formulario vacío: al guardar se creará la
			fila del subtipo.
			<br />
			Nota: este formulario solo modifica la tabla del subtipo. Si quieres cambiar el <em
				>productType</em
			> (Hotel / Tour / Package) hazlo en la página de datos del producto.
		</p>
	</section>

	<script define:vars={{ SUBTYPE_TYPE: normalizedType }}>
		// Valores embebidos del servidor

		;(function () {
			// helpers
			const toNumber = (v) => {
				if (v === null || v === undefined || v === "") return null
				const n = Number(v)
				return Number.isFinite(n) ? n : null
			}

			const form = document.getElementById("subtypeForm")
			const submitBtn = document.getElementById("subtypeSubmit")
			const msgEl = document.getElementById("subtypeMsg")
			const PRODUCT_ID = document.getElementById("productId").value
			console.log("PRODUCT_ID", PRODUCT_ID)
			console.log("SUBTYPE_TYPE", SUBTYPE_TYPE)

			if (!form || !submitBtn || !msgEl) return

			form.addEventListener("submit", async (ev) => {
				ev.preventDefault()
				msgEl.textContent = ""
				submitBtn.disabled = true
				const originalText = submitBtn.textContent
				submitBtn.textContent = "Guardando..."

				try {
					// Seleccionar la sección visible
					const sections = Array.from(form.querySelectorAll("[data-subtype-section]"))
					const active = sections.find((s) => !s.classList.contains("hidden"))

					const payload = {}

					if (active) {
						const inputs = active.querySelectorAll("input[name], textarea[name], select[name]")
						inputs.forEach((el) => {
							const input = el
							const name = input.name
							if (!name) return
							let value = input.value

							// conversiones simples conocidas
							if (["stars", "days", "nights"].includes(name)) {
								value = toNumber(input.value)
							}
							if (name === "guideLanguages") {
								const raw = String(value || "").trim()
								value = raw
									? raw
											.split(",")
											.map((s) => s.trim())
											.filter(Boolean)
									: []
							}
							if (value === "") value = null
							payload[name] = value
						})
					}

					// Petición al endpoint dedicado
					const resp = await fetch("/api/products/subtype/update", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({
							productId: PRODUCT_ID,
							subtypeType: SUBTYPE_TYPE,
							subtype: payload,
						}),
					})

					const result = await resp.json().catch(() => ({}))

					if (!resp.ok) {
						msgEl.innerHTML = `<span class="text-red-400">Error: ${result?.error || resp.statusText}</span>`
						submitBtn.disabled = false
						submitBtn.textContent = originalText
						return
					}

					msgEl.innerHTML = `<span class="text-green-300">Subtipo guardado correctamente.</span>`
					submitBtn.textContent = "Guardado"
					setTimeout(() => {
						window.location.href = `/products/${PRODUCT_ID}`
					}, 500)
				} catch (err) {
					console.error("update-subtype client error:", err)
					msgEl.innerHTML = `<span class="text-red-400">Error inesperado, revisa la consola.</span>`
					submitBtn.disabled = false
					submitBtn.textContent = originalText
				}
			})
		})()
	</script>
</Layout>
