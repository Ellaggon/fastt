---
import Breadcrumbs from "@/components/Breadcrumbs.astro"
import MapClient from "@/components/product/MapClient.astro"
import { serviceIcons } from "@/data/service-icons"
import Layout from "@/layouts/Layout.astro"
import type { ImageRow, ServiceRow } from "@/types/products"
import {
	asc,
	db,
	desc,
	Destination,
	eq,
	Hotel,
	Image,
	Product,
	ProductService,
	Service,
} from "astro:db"

const productId = Astro.params.id
let product: any = null
let subtype: any = null
let images: ImageRow[] = []
let services: ServiceRow[] = []
let errorMessage: string | null = null

try {
	if (!productId) throw new Error("ID de producto no proporcionado.")

	const productResult = await db
		.select()
		.from(Product)
		.leftJoin(Destination, eq(Destination.id, Product.destinationId))
		.where(eq(Product.id, productId))
		.get()

	if (!productResult) throw new Error("Producto no encontrado.")
	product = { ...productResult.Product, destination: productResult.Destination }

	const servicesResult = await db
		.select({ id: Service.id, name: Service.name })
		.from(ProductService)
		.leftJoin(Service, eq(ProductService.serviceId, Service.id))
		.where(eq(ProductService.productId, productId))
		.all()

	services = (servicesResult ?? []).filter((s) => s.id && s.name) as ServiceRow[]

	images = await db
		.select()
		.from(Image)
		.where(eq(Image.entityId, productId))
		.orderBy(desc(Image.isPrimary), asc(Image.order))
		.all()

	subtype = await db.select().from(Hotel).where(eq(Hotel.productId, productId)).get()
} catch (e) {
	console.error("Error al obtener detalles del producto:", e)
	errorMessage = e instanceof Error ? e.message : "Error desconocido"
}

const productData = product ? { ...product, images, subtype, services } : null
console.log("productData: ", productData)

const breadcrumbItems = [
	{ name: "Home", href: "/" },
	{
		name: productData?.productType ?? "",
		href:
			productData?.productType === "Hotel"
				? "/hotels"
				: productData?.productType === "Package"
					? "/packages"
					: "/tours",
	},
	{
		name: productData?.name || "/",
		href: `/products/${productId}`,
		current: true,
	},
]
---

<Layout title={productData?.name || "Producto"}>
	<main class="mx-auto min-h-screen max-w-7xl space-y-10 p-4 lg:p-12">
		<div class="hidden md:block">
			<Breadcrumbs items={breadcrumbItems} />
		</div>

		{
			errorMessage ? (
				<div class="flex min-h-[60vh] flex-col items-center justify-center text-center">
					<h1 class="mb-4 text-4xl font-bold text-red-500">{errorMessage}</h1>
					<a
						href="/"
						class="rounded-lg border border-gray-500 px-6 py-3 transition hover:bg-gray-800 hover:text-white"
					>
						Volver al inicio
					</a>
				</div>
			) : productData ? (
				<>
					{/* <!-- üñº Imagen principal --> */}
					<div class="relative overflow-hidden rounded-2xl shadow-lg">
						<img
							id="gallery-main-img"
							src={productData.images[0]?.url || "https://placehold.co/1200x675?text=Sin+imagen"}
							alt={productData.name}
							class="h-96 w-full cursor-pointer object-cover transition-transform duration-700 hover:scale-105"
						/>
					</div>

					{/* <!-- üñº Miniaturas --> */}
					{productData.images.length > 1 && (
						<div class="grid grid-cols-3 gap-2 sm:grid-cols-4 md:grid-cols-6">
							{productData.images.map((img: ImageRow, i: number) => (
								<img
									src={img.url}
									alt={`Imagen ${i + 1}`}
									class="thumb-img h-24 w-full cursor-pointer rounded-lg object-cover hover:opacity-80"
									data-index={i}
								/>
							))}
						</div>
					)}

					{/* <!-- üìã Info principal --> */}
					<section class="space-y-3 rounded-2xl border border-gray-200 bg-gray-100 p-8 shadow-sm">
						<div class="flex gap-1 text-black">
							{Array.from({ length: productData.subtype?.stars || 0 }).map((_, i) => (
								<svg
									xmlns="http://www.w3.org/2000/svg"
									fill="currentColor"
									viewBox="0 0 24 24"
									class="h-5 w-5"
								>
									<path d="M12 .587l3.668 7.568L24 9.748l-6 5.85 1.416 8.252L12 19.771l-7.416 4.079L6 15.598 0 9.748l8.332-1.593z" />
								</svg>
							))}
						</div>
						<h1 class="text-4xl font-bold text-gray-900">{productData.name}</h1>
						<p class="text-neutral-500">
							{productData.subtype?.address}, {productData.destination?.name}
						</p>
						{/* <!-- Servicios --> */}
						{productData.services.length > 0 && (
							<ul class="flex grid grid-cols-2 justify-start gap-3 py-10 md:grid-cols-3 lg:grid-cols-4">
								{productData.services.map((service: ServiceRow) => {
									const key = service.id?.toLowerCase() as keyof typeof serviceIcons
									const Icon = serviceIcons[key]
									return (
										<li class="flex h-[42px] max-w-56 items-center gap-2 p-2">
											{Icon ? <Icon class="h-5 w-5 shrink-0 text-black" /> : <span>‚Ä¢</span>}
											<span class="text-sm text-black">{service.name}</span>
										</li>
									)
								})}
							</ul>
						)}
						<p class="mt-4 leading-relaxed text-gray-700">{productData.longDescription}</p>
					</section>

					<section class="grid grid-cols-2 p-8">
						<div>
							<p>
								<b>Check-in:</b> {productData.subtype?.checkInTime}
							</p>
							<p>
								<b>Check-out:</b> {productData.subtype?.checkOutTime}
							</p>
						</div>
						<div>
							<p>
								<b>$</b>
								{productData?.basePriceUSD}
							</p>
							<p>
								{productData?.basePriceBOB}
								<b>Bs</b>
							</p>
						</div>
					</section>

					{/* mapa */}
					<MapClient
						latitude={productData.latitude}
						longitude={productData.longitude}
						address={productData.subtype?.address || ""}
					/>
				</>
			) : (
				<p class="text-center text-gray-500">Cargando...</p>
			)
		}
	</main>
	{/* <!-- ü™ü Modal --> */}
	<div
		id="gallery-modal"
		class="fixed inset-0 z-50 flex hidden flex-col items-center justify-center bg-black bg-opacity-90 p-4 backdrop-blur-sm transition-opacity duration-300"
	>
		<button
			id="modal-close"
			class="absolute right-0 top-0 z-20 m-4 flex h-10 w-10 items-center justify-center rounded-full bg-black/50 text-3xl font-bold text-white hover:bg-black/70 md:right-10 md:top-10 lg:h-20 lg:w-20 lg:text-5xl"
		>
			&times;
		</button>

		<div
			id="modal-image-container"
			class="relative flex w-full max-w-sm md:max-w-xl lg:max-w-3xl xl:max-w-5xl"
		>
			<img
				id="modal-img"
				class="hidden h-auto max-h-[80vh] w-full rounded-xl object-contain shadow-lg transition-all duration-300 md:block"
				alt="Vista ampliada"
			/>
			<div
				id="modal-vertical-gallery"
				class="flex w-full snap-y snap-mandatory flex-col gap-4 overflow-y-auto md:hidden"
			>
			</div>
		</div>

		<button
			id="modal-prev-desktop"
			class="absolute left-10 top-1/2 z-10 hidden h-16 w-16 -translate-y-1/2 items-center justify-center text-6xl font-bold text-white hover:text-gray-400 md:flex"
		>
			‚ùÆ
		</button>
		<button
			id="modal-next-desktop"
			class="absolute right-10 top-1/2 z-10 hidden h-16 w-16 -translate-y-1/2 items-center justify-center text-6xl font-bold text-white hover:text-gray-400 md:flex"
		>
			‚ùØ
		</button>
	</div>

	<script>
		document.addEventListener("DOMContentLoaded", () => {
			const mainImg = document.getElementById("gallery-main-img") as HTMLImageElement | null
			const thumbImgs = Array.from(document.querySelectorAll<HTMLImageElement>(".thumb-img"))
			const modal = document.getElementById("gallery-modal") as HTMLElement | null
			const modalImg = document.getElementById("modal-img") as HTMLImageElement | null
			const modalContainer = document.getElementById("modal-image-container") as HTMLElement | null
			const modalVertical = document.getElementById("modal-vertical-gallery") as HTMLElement | null

			// Botones
			const btnPrevDesktop = document.getElementById("modal-prev-desktop") as HTMLElement | null
			const btnNextDesktop = document.getElementById("modal-next-desktop") as HTMLElement | null
			const modalClose = document.getElementById("modal-close") as HTMLElement | null

			let currentIndex = 0
			let touchStartX = 0 // Para manejar el swipe
			const SWIPE_THRESHOLD = 50 // M√≠nimo de p√≠xeles para considerar un swipe

			// --- Funciones de Control ---
			const isMobile = () => window.innerWidth < 768

			const openModal = (index: number) => {
				if (!modal || !modalImg) return
				currentIndex = index
				modal.classList.remove("hidden", "hide")
				modal.classList.add("show")
				document.body.style.overflow = "hidden"

				if (isMobile()) {
					if (modalVertical) {
						modalVertical.innerHTML = thumbImgs
							.map(
								(img) => `
									<div class="flex justify-center snap-center">
										<img src="${img.src}" class="w-full max-h-[85vh] object-contain rounded-xl shadow-md" />
									</div>`
							)
							.join("")
					}
				} else {
					// Desktop: solo una imagen
					if (modalImg) modalImg.src = thumbImgs[index].src
				}
			}

			const closeModal = () => {
				if (!modal) return
				modal.classList.remove("show")
				modal.classList.add("hide")
				setTimeout(() => {
					modal.classList.add("hidden")
					modal.classList.remove("hide")
					document.body.style.overflow = "auto"
				}, 280)
			}

			const changeImage = (newIndex: number) => {
				if (!modalImg) return
				modalImg.classList.add("fade")
				setTimeout(() => {
					currentIndex = (newIndex + thumbImgs.length) % thumbImgs.length
					modalImg.src = thumbImgs[currentIndex].src
					modalImg.classList.remove("fade")
				}, 180)
			}

			const showPrev = () => changeImage(currentIndex - 1)
			const showNext = () => changeImage(currentIndex + 1)

			modalContainer?.addEventListener("mousemove", (e) => {
				if (!modalImg) return
				const rect = modalContainer.getBoundingClientRect()
				const offsetX = (e.clientX - rect.left) / rect.width - 0.5
				const offsetY = (e.clientY - rect.top) / rect.height - 0.5
				modalImg.style.transform = `translate(${offsetX * 15}px, ${offsetY * 10}px) scale(1.02)`
			})

			modalContainer?.addEventListener("mouseleave", () => {
				if (!modalImg) return
				modalImg.style.transform = "translate(0, 0) scale(1)"
			})

			// --- L√≥gica de Swipe ---
			const handleTouchStart = (e: TouchEvent) => {
				touchStartX = e.touches[0].clientX
			}

			const handleTouchEnd = (e: TouchEvent) => {
				const touchEndX = e.changedTouches[0].clientX
				const deltaX = touchEndX - touchStartX

				if (modal?.classList.contains("hidden") || Math.abs(deltaX) < SWIPE_THRESHOLD) {
					return // Ignorar si el modal est√° cerrado o el movimiento es demasiado peque√±o
				}

				if (deltaX > 0) {
					// Movimiento a la derecha (Swipe Right -> Show Prev)
					showPrev()
				} else if (deltaX < 0) {
					// Movimiento a la izquierda (Swipe Left -> Show Next)
					showNext()
				}
			}

			// --- Event Listeners ---
			mainImg?.addEventListener("click", () => openModal(0))
			thumbImgs.forEach((thumb, i) => thumb.addEventListener("click", () => openModal(i)))
			modalClose?.addEventListener("click", closeModal)
			modal?.addEventListener("click", (e) => e.target === modal && closeModal())

			// Eventos de botones (Desktop y Mobile)
			const allNavButtons = [btnPrevDesktop, btnNextDesktop]

			allNavButtons.forEach((btn) => {
				btn?.addEventListener("click", (e) => {
					e.stopPropagation()
					// Determina si es 'prev' o 'next' basado en el ID
					if (btn.id.includes("prev")) {
						showPrev()
					} else {
						showNext()
					}
				})
			})

			// Eventos T√°ctiles (Swipe)
			if (modalContainer) {
				modalContainer.addEventListener("touchstart", handleTouchStart, false)
				modalContainer.addEventListener("touchend", handleTouchEnd, false)
			}

			// Eventos de teclado
			document.addEventListener("keydown", (e) => {
				if (modal?.classList.contains("hidden")) return
				if (e.key === "ArrowLeft") showPrev()
				if (e.key === "ArrowRight") showNext()
				if (e.key === "Escape") closeModal()
			})
		})
	</script>
	<style>
		/* --- Animaciones suaves --- */
		@keyframes modalFadeIn {
			from {
				opacity: 0;
				transform: scale(0.96) translateY(20px);
			}
			to {
				opacity: 1;
				transform: scale(1) translateY(0);
			}
		}

		@keyframes modalFadeOut {
			from {
				opacity: 1;
				transform: scale(1) translateY(0);
			}
			to {
				opacity: 0;
				transform: scale(0.96) translateY(20px);
			}
		}

		#gallery-modal.show {
			display: flex !important;
			animation: modalFadeIn 0.4s ease-out forwards;
		}

		#gallery-modal.hide {
			animation: modalFadeOut 0.3s ease-in forwards;
		}

		/* Imagen con transici√≥n sutil de cambio */
		#modal-img {
			transition:
				opacity 0.4s ease,
				transform 0.4s ease;
		}
		#modal-img.fade {
			opacity: 0;
			transform: scale(0.98);
		}
		/* Galer√≠a vertical m√≥vil */
		#modal-vertical-gallery {
			scroll-snap-type: y mandatory;
			overflow-y: scroll;
			height: 85vh;
			scroll-behavior: smooth;
		}
		#modal-vertical-gallery::-webkit-scrollbar {
			display: none;
		}
		#modal-vertical-gallery > div {
			scroll-snap-align: center;
		}
	</style>
</Layout>
