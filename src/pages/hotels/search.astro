---
import ProductCard from "@/components/product/ProductCard.astro"
import SearchLayout from "@/layouts/SearchLayout.astro"
import { and, db, Destination, eq, Hotel, Image, or, Product, sql } from "astro:db"

type ProductResult = {
	id: string
	name: string
	shortDescription: string | null
	basePriceUSD: number | null
	basePriceBOB: number | null
	address: string | null
	stars: number | null
	imageUrl: string | null
	services: string | null
}

const url = new URL(Astro.request.url)
const params = url.searchParams
const destinationId = params.get("destinationId") || params.get("destinationQuery") || null
const checkin = params.get("checkin") || null
const checkout = params.get("checkout") || null
const adults = params.get("adults") || "2"
const children = params.get("children") || "0"
const rooms = params.get("rooms") || "1"

let hotels: ProductResult[] = []
let destination = null

if (destinationId) {
	// si nos pasan un slug o un id, intentamos resolverlo en Destination
	const possible = await db
		.select()
		.from(Destination)
		.where(or(eq(Destination.id, destinationId), eq(Destination.slug, destinationId)))
		.limit(1)
		.all()

	if (possible.length > 0) {
		destination = possible[0]
	}
}

try {
	const whereClause = destination
		? and(
				eq(Product.productType, "Hotel"),
				or(
					eq(Product.destinationId, destination?.id),
					eq(Product.departmentId, destination?.department ?? destination?.id)
				)
			)
		: eq(Product.productType, "Hotel")

	hotels = await db
		.select({
			id: Product.id,
			name: Product.name,
			imageUrl: sql<string>`(
				SELECT url 
				FROM Image 
				WHERE entityId = ${Product.id}
				ORDER BY isPrimary DESC, "order" ASC
				LIMIT 1
			)`.as("imageUrl"),
			shortDescription: Product.shortDescription,
			basePriceUSD: Product.basePriceUSD,
			basePriceBOB: Product.basePriceBOB,
			address: Hotel.address,
			stars: Hotel.stars,
			services: sql<string>`(
				SELECT json_group_array(
					json_object(
						'id', s.id,
						'name', s.name
					)
				)
				FROM ProductService ps 
				JOIN Service s ON s.id = ps.serviceId
				WHERE ps.productId = ${Product.id}
			)`.as("services"),
		})
		.from(Product)
		.leftJoin(Hotel, eq(Hotel.productId, Product.id))
		.leftJoin(Image, and(eq(Image.entityId, Product.id), eq(Image.isPrimary, true)))
		.where(whereClause)
		.limit(50)
		.all()
} catch (err) {
	console.error("error querying hotels", err)
}
console.log("hotels: ", hotels)
---

<SearchLayout title="Resultados de búsqueda" producType="hotels">
	<div class="flex grid grid-cols-4 justify-center">
		<aside class="col-span-1 m-7 hidden rounded-lg border md:flex"></aside>

		<main
			class="col-span-4 mx-auto my-3 max-w-7xl px-4 pt-3 sm:px-6 md:col-span-3 md:pt-10 lg:px-5 xl:col-span-2 xl:pt-10"
		>
			<h1 class="mb-4 text-2xl font-bold">Resultados</h1>
			<p class="text-sm text-gray-600">
				Destino: {destination?.name ?? "Cualquier lugar"} — Fechas: {checkin ?? "-"} → {
					checkout ?? "-"
				}
			</p>
			<div class="mt-7 grid grid-cols-1 gap-6">
				{
					hotels.length > 0 ? (
						hotels.map((h) => (
							<ProductCard
								name={h.name}
								href={`/hotels/${h.id}`}
								image={h.imageUrl || "https://picsum.photos/400/250"}
								alt={h.name}
								stars={h.stars || 0}
								address={h.address || "Dirección no disponible"}
								description={h.shortDescription || ""}
								priceUSD={h.basePriceUSD || 0}
								priceBOB={h.basePriceBOB || 0}
								services={h.services ? JSON.parse(h.services) : []}
							/>
						))
					) : (
						<p class="col-span-full text-center text-gray-500">No se encontraron hoteles.</p>
					)
				}
			</div>
		</main>
	</div>
</SearchLayout>
